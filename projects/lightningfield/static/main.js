(()=>{"use strict";var t={169:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AxisAlignedRectangle=e.LineSegment=e.Line=void 0;const s=i(926);class n{constructor(t,e,i){this.a=t,this.b=e,this.c=i}intersection(t){if(!this.parallelTo(t))return new s.Vector2((t.b*this.c-this.b*t.c)/(this.a*t.b-t.a*this.b),(this.a*t.c-t.a*this.c)/(this.a*t.b-t.a*this.b))}parallelTo(t){return this.a===t.a&&this.b===t.b}add(t){return new n(this.a,this.b,this.c+this.a*t.x+this.b*t.y)}truncate(t,e){return new r(this.a,this.b,this.c,t,e)}x(t){return 0===this.a?void 0:(this.c-this.b*t)/this.a}y(t){return 0===this.b?void 0:(this.c-this.a*t)/this.b}clipTo(t){const e=[this.intersection(t.top),this.intersection(t.bottom),this.intersection(t.left),this.intersection(t.right)].filter((e=>e&&t.contains(e)));if(0===e.length)return;if(1===e.length){const t=e[0];return this.truncate(t,t)}e.sort(((t,e)=>this.positionOf(t)-this.positionOf(e)));const i=e[0],s=e[e.length-1];return this.truncate(i,s)}positionOf(t){return 0!==this.a?t.x:t.y}color(){const t=this.a*this.a+this.b*this.b,e=Math.floor(255*(t-1)/(t+1));return`rgb(${e}, ${e}, ${e})`}}e.Line=n;class r extends n{constructor(t,e,i,s,n){super(t,e,i),this.a=t,this.b=e,this.c=i,this.start=s,this.end=n}intersection(t){const e=super.intersection(t);if(!e)return;const i=new s.Vector2(Math.min(this.start.x,this.end.x),Math.min(this.start.y,this.end.y)),n=new s.Vector2(Math.max(this.start.x,this.end.x),Math.max(this.start.y,this.end.y));return i.x<=e.x&&e.x<=n.x&&i.y<=e.y&&e.y<=n.y?e:void 0}add(t){const e=super.add(t);return new r(e.a,e.b,e.c,this.start.add(t),this.end.add(t))}line(){return new n(this.a,this.b,this.c)}}e.LineSegment=r,e.AxisAlignedRectangle=class{constructor(t,e){this.min=t,this.size=e,this.max=this.min.add(this.size),this.left=new n(1,0,this.min.x),this.right=new n(1,0,this.max.x),this.top=new n(0,1,this.min.y),this.bottom=new n(0,1,this.max.y)}contains(t){return this.min.x<=t.x&&t.x<=this.max.x&&this.min.y<=t.y&&t.y<=this.max.y}}},407:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isInteger=void 0,e.isInteger=t=>void 0!==t&&Math.floor(t)===t},926:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector2=void 0;const s=i(407);class n{constructor(t,e){this.x=t,this.y=e}add(t){return new n(this.x+t.x,this.y+t.y)}subtract(t){return new n(this.x-t.x,this.y-t.y)}map(t){return new n(t(this.x),t(this.y))}squaredDistanceTo(t){return Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2)}isIntegral(){return(0,s.isInteger)(this.x)&&(0,s.isInteger)(this.y)}static min(...t){return new n(Math.min(...t.map((t=>t.x))),Math.min(...t.map((t=>t.y))))}static max(...t){return new n(Math.max(...t.map((t=>t.x))),Math.max(...t.map((t=>t.y))))}}e.Vector2=n}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var r=e[s]={exports:{}};return t[s](r,r.exports,i),r.exports}(()=>{const t=i(169),e=i(407),s=i(926),n=new s.Vector2(1,1),r=e=>[new t.Line(e.x,e.y,0),new t.Line(e.y,e.x,0),new t.Line(-e.x,e.y,0),new t.Line(e.y,-e.x,0)],o=[...r(new s.Vector2(1,7)),...r(new s.Vector2(1,6)),...r(new s.Vector2(1,5)),...r(new s.Vector2(1,4)),...r(new s.Vector2(1,3)),...r(new s.Vector2(1,2)),new t.Line(-1,1,0),new t.Line(1,1,0),new t.Line(0,1,0),new t.Line(1,0,0)],a=(e,i)=>{const n=new t.Line(0,1,0),r=new t.Line(0,1,i.y),o=new t.Line(1,0,0),a=new t.Line(1,0,i.x),h=t=>{const e=t.intersection(n),i=t.intersection(a);if(e&&i)return new s.Vector2(Math.min(e.x,i.x),Math.max(e.y,i.y))},c=t=>{const e=t.intersection(r),i=t.intersection(a);if(e&&i)return s.Vector2.min(e,i)},d=[];if(e.a*e.b<=0){for(let t=0;t<Math.abs(e.b);t++)for(let n=0;n<=i.y;n++)if(n<i.y||0===e.a){const i=new s.Vector2(-t,n),h=e.add(i),l=h.intersection(o),u=h.parallelTo(r)?h.intersection(a):c(h);l&&u&&d.push(h.truncate(l,u))}for(let t=0;t<Math.abs(e.a);t++)for(let o=0;o<=i.x;o++)if(o>0||0===e.b){const i=new s.Vector2(o,t),h=e.add(i),l=h.intersection(n),u=h.parallelTo(a)?h.intersection(r):c(h);l&&u&&d.push(h.truncate(l,u))}}else{for(let t=0;t<Math.abs(e.b);t++)for(let r=0;r<=i.y;r++){const i=new s.Vector2(-t,r),a=e.add(i),c=a.intersection(o);if(c&&c.x>=0&&c.y>=0){const t=a.parallelTo(o)?a.intersection(n):h(a);t&&d.push(a.truncate(c,t))}}for(let t=0;t<Math.abs(e.a);t++)for(let a=0;a<=i.x;a++)if(a>0||0===e.b){const c=new s.Vector2(a,i.y-t),l=e.add(c),u=l.intersection(r),x=l.parallelTo(o)?l.intersection(n):h(l);u&&x&&d.push(l.truncate(u,x))}}return d},h=(t,i,n,r)=>{if(t.isIntegral())return t;const o=e=>{const n=(r>=0?Math.ceil:Math.floor)(t.x)+r*e,o=i.y(n);return void 0===o?void 0:new s.Vector2(n,o)};let a=0,h=o(a);for(;h&&!(0,e.isInteger)(h.y);){if(!n.contains(h))return;h=o(a),a++}return h&&n.contains(h)?h:void 0},c=(e,i,s)=>{const[n,r]=((t,e,i)=>[h(t,e,i,-1),h(t,e,i,1)])(e,i,s);return[void 0===n?void 0:new t.LineSegment(i.a,i.b,i.c,i.start,n),void 0===r?void 0:new t.LineSegment(i.a,i.b,i.c,r,i.end)]};class d extends HTMLElement{constructor(){super(),this.axes=[],this.unitSquareIntersections=new Map,this.hasRenderDataChanged=!1,this.canvas=document.createElement("canvas"),this.canvas.addEventListener("mousemove",(t=>this.onMouseMove(t)));const t=this.canvas.getContext("2d");t&&(this.context=t),new ResizeObserver((t=>{for(const e of t)e.contentRect&&this.setCanvasSize(e.contentRect.width,e.contentRect.height)})).observe(this),this.attachShadow({mode:"open"}).appendChild(this.canvas),setInterval((()=>{this.mostRecentMouseMoveTimestamp&&Date.now()-this.mostRecentMouseMoveTimestamp>=5e3&&(this.hasRenderDataChanged=!0,requestAnimationFrame((()=>this.render())))}),1e3)}connectedCallback(){const t=this.getBoundingClientRect();this.setCanvasSize(t.width,t.height),this.canvas&&(this.canvas.style.cursor="crosshair",requestAnimationFrame((()=>{this.render()})))}setCanvasSize(e,i){this.gridWidth=e<i?15:24,this.gridHeight=e<i?24:15;const n=new s.Vector2(0,0),r=new s.Vector2(this.gridWidth,this.gridHeight);this.bounds=new t.AxisAlignedRectangle(n,r),this.gridCellSize=Math.floor(e/(this.gridWidth+3)),this.canvas.width=e,this.canvas.height=this.gridCellSize*(this.gridHeight+3),this.drawAllAxes();const h=o.flatMap((t=>a(t,new s.Vector2(1,1))));this.unitSquareIntersections=(t=>{const e=new Map;for(let i=0;i<t.length-1;i++)for(let s=i+1;s<t.length;s++){const n=t[i],r=t[s],o=n.intersection(r);o&&(e.has(o.x)||e.set(o.x,new Map),e.get(o.x)?.has(o.y)||e.get(o.x)?.set(o.y,new Set),e.get(o.x)?.get(o.y)?.add(n.line()),e.get(o.x)?.get(o.y)?.add(r.line()))}const i=new Map;for(const[t,n]of e.entries())for(const[e,r]of n.entries())i.set(new s.Vector2(t,e),Array.from(r));return i})(h),this.hasRenderDataChanged=!0}drawAllAxes(){this.axes=o.flatMap((t=>this.gridWidth&&this.gridHeight?a(t,new s.Vector2(this.gridWidth,this.gridHeight)):[])),this.hasRenderDataChanged=!0}drawLineSegment(t,e,i){this.context&&this.gridCellSize&&(this.context.lineWidth=1,this.context.strokeStyle=i,this.context.beginPath(),this.context.moveTo(t.x*this.gridCellSize,t.y*this.gridCellSize),this.context.lineTo(e.x*this.gridCellSize,e.y*this.gridCellSize),this.context.stroke())}drawGridPoints(){if(this.context&&this.gridWidth&&this.gridHeight)for(let t=0;t<=this.gridWidth;t++)for(let e=0;e<=this.gridHeight;e++)this.drawPoint(new s.Vector2(t,e).add(n))}drawPoint(t){this.context&&this.gridCellSize&&(this.context.fillStyle="grey",this.context.beginPath(),this.context.arc(t.x*this.gridCellSize,t.y*this.gridCellSize,1,0,2*Math.PI,!1),this.context.fill())}onMouseMove(t){if(!this.gridCellSize)return;if(!this.bounds)return;if(!this.unitSquareIntersections)return;const e=this.canvas.getBoundingClientRect(),i=new s.Vector2((t.clientX-e.left)/this.gridCellSize,(t.clientY-e.top)/this.gridCellSize),r=i.subtract(n);if(!this.bounds.contains(r))return;const o=i.map(Math.floor),a=new s.Vector2(i.x%o.x,i.y%o.y),h=Array.from(this.unitSquareIntersections.keys()).map((t=>({squaredDistance:t.squaredDistanceTo(a),intersection:t}))).sort(((t,e)=>t.squaredDistance-e.squaredDistance))[0].intersection,c=this.unitSquareIntersections.get(h);c&&(this.closestIntersection={point:h.add(o).subtract(n),lines:c.map((t=>t.add(o.subtract(n))))}),this.mostRecentMouseMoveTimestamp=Date.now(),this.hasRenderDataChanged=!0}render(){if(this.context)if(this.hasRenderDataChanged){if(this.context.fillRect(0,0,150,75),this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.mostRecentMouseMoveTimestamp&&Date.now()-this.mostRecentMouseMoveTimestamp<5e3&&this.closestIntersection&&this.bounds)for(const t of this.closestIntersection.lines){const e=t.clipTo(this.bounds),i=t.color();if(e){const t=c(this.closestIntersection.point,e,this.bounds);for(const e of t)e&&this.drawLineSegment(e.start.add(n),e.end.add(n),i)}}else for(const t of this.axes)this.drawLineSegment(t.start.add(n),t.end.add(n),t.color());this.hasRenderDataChanged=!1,requestAnimationFrame((()=>{this.render()}))}else requestAnimationFrame((()=>{this.render()}));else requestAnimationFrame((()=>{this.render()}))}}customElements.define("lightning-field",d)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,